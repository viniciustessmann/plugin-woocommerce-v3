/*
 * Sizes
 * 0 = none
 * 1 = preon
 *
 * Small: Multiples of 2
 * 2 = quark
 * 4 = nano
 * 6 = micro
 * 8 = mini
 * 10 = tiny
 * 12 = little
 * 14 = small
 *
 * Default: Multiples of 4
 * 16 = normal
 * 20 = medium
 * 24 = big
 * 28 = large
 * 32 = grand
 * 36 = giant
 *
 * Large: Multiples of 8
 * 40 = gigantic
 * 48 = immense
 * 56 = enormous
 * 64 = tremendous
 * 72 = massive
 * 80 = huge
 * 88 = monstrous
 * 96 = colossal
 * 104 = astronomical
 * 112 = titanic
 */

// @stylint off
$sizes = {
	small: {
		multiple: 2,
		names: (none quark nano micro mini tiny little small)
	},
	default: {
		multiple: 4,
		names: (normal medium big large grand giant)
	},
	large: {
		multiple: 8,
		names: (gigantic immense enormous tremendous massive huge monstrous colossal astronomical titanic)
	}
}
// @stylint on
$sizes.names = concat($sizes.small.names, $sizes.default.names, $sizes.large.names)

$size-preon = 1px

// Generate small size variables: $sizes-quark...small
for $s, $i in $sizes.small.names
	define('$size-' + $s, unit($sizes.small.multiple * $i, 'px'))

// Generate default size variables: $sizes-normal...giant
$initial-default-index = 16 / $sizes.default.multiple
for $s, $i in $sizes.default.names
	define('$size-' + $s, unit($sizes.default.multiple * ($i + $initial-default-index), 'px'))

// Generate large size variables: $sizes-gigantic...titanic
$initial-large-index = 40 / $sizes.large.multiple
for $s, $i in $sizes.large.names
	define('$size-' + $s, unit($sizes.large.multiple * ($i + $initial-large-index), 'px'))


/*
 * Spacing
 *
 * 4 = tight
 * 8 = narrow
 * 16 = snug
 * 32 = loose
 * 40 = wide
 * 48 = widish
 * 64 = vast
 */

$spacing = {
	none: 0,
	tight: $size-nano,
	narrow: $size-mini,
	snug: $size-normal,
	loose: $size-grand,
	wide: $size-gigantic,
	widish: $size-immense,
	vast: $size-tremendous
}

// Generate spacing variables: $spacing-none...wide
for $s in $spacing
	define('$spacing-' + $s, $spacing[$s])


/*
 * Colors
 *
 * In case the color has no name, use the following website to name the color:
 * http://chir.ag/projects/name-that-color
 */

$colors = {
	white: #fff,
	concrete: #f2f2f2,
	cats-kill-white: #f2f6f9,
	ghost: #c8cdda,
	pale-sky: #697882,
	shuttle-gray: #556976,
	bright-gray: #3b3f51,
	ebony-clay: #26303c,

	endeavour: #0550a0,
	curious-blue: #3598dc,
	jungle-green: #2bc866,
	mandy: #e7505a,
	neon-carrot: #fe9037,

	science-blue: #015dbf,
	congress-blue: #04478e,
	light-yellow: #f3b331,

	cornflower-blue: #00519d,
	saffron: #f3b331,

	anakiwa: #a8daff
}


/*
 * Themes
 */

$light-coefficient = 7
$dark-coefficient = 4
// @stylint off
$themes = {
	neutral: {
		shine: $colors.white,
		bright: $colors.cats-kill-white,
		light: $colors.ghost,
		clear: $colors.pale-sky,
		medium: $colors.shuttle-gray,
		dark: $colors.bright-gray,
		murk: $colors.ebony-clay
	},
	primary: {
		default: $colors.endeavour,
		light: lighten($colors.endeavour, $light-coefficient),
		dark: darken($colors.endeavour, $dark-coefficient)
	},
	secondary: {
		default: $colors.light-yellow,
		light: lighten($colors.light-yellow, $light-coefficient),
		dark: darken($colors.light-yellow, $dark-coefficient)
	},
	info: {
		default: $colors.curious-blue,
		light: lighten($colors.curious-blue, $light-coefficient),
		dark: darken($colors.curious-blue, $dark-coefficient)
	},
	success: {
		default: $colors.jungle-green,
		light: lighten($colors.jungle-green, $light-coefficient),
		dark: darken($colors.jungle-green, $dark-coefficient)
	},
	danger: {
		default: $colors.mandy,
		light: lighten($colors.mandy, $light-coefficient),
		dark: darken($colors.mandy, $dark-coefficient)
	},
	warning: {
		default: $colors.neon-carrot,
		light: lighten($colors.neon-carrot, $light-coefficient),
		dark: darken($colors.neon-carrot, $dark-coefficient)
	},
	brand: {
		type: $colors.cornflower-blue,
		icon: $colors.saffron
	}
}
// @stylint on

/*
 * Generate theme variables:
 * $theme-primary, $theme-primary-light, $theme-primary-dark...
 */
// @stylint off
for $theme in $themes
	for $t in $themes[$theme]
		if $t is 'default'
			define('$theme-' + $theme, $themes[$theme][$t])
		else
			define('$theme-' + $theme + '-' + $t, $themes[$theme][$t])
// @stylint on


/*
 * Shadows
 */

$shadows = {}
$shadows.opacity = {
	default: .15
}
$shadows.colors = {
	default: alpha($theme-neutral-murk, $shadows.opacity.default)
}
$shadows.styles = {
	small: '0 2px 5px %s' % $shadows.colors.default,
	default: '0 5px 8px %s' % $shadows.colors.default,
	large: '0 0 20px %s' % $shadows.colors.default,
	large-down: '0 5px 20px %s' % $shadows.colors.default
}

// @stylint off
for $s in $shadows.styles
	define('$shadow-' + $s, $shadows.styles[$s])
// @stylint on


/*
 * Typography
 */

// @stylint off
$font = {
	// Font Names
	alias: {
		default: 'lato',
		alt: 'open-sans'
	},

	// Font Families
	family: {
		lato: unquote('"Lato", sans-serif'),
		open-sans: unquote('"Open Sans", sans-serif')
	},

	// Font Weights
	weight: {
		lato-regular: 400,
		lato-bold: 700,
		open-sans-regular: 400,
		open-sans-bold: 700
	},

	// Font Sizes
	size: {
		xxs: $size-tiny, //10px
		xs: $size-little, //12px
		sm: $size-small, // 14px
		md: $size-normal, //16px
		lg: $size-medium, //20px
		xl: $size-big, //24px
		xxl: $size-giant //36px
	}
}

// Font Definitions
$font.family.default = $font.family[$font.alias.default]
$font.family.alt = $font.family[$font.alias.alt]
$font.weight.default = {
	regular: $font.weight[$font.alias.default + '-regular'],
	bold: $font.weight[$font.alias.default + '-bold']
}
$font.weight.alt = {
	regular: $font.weight[$font.alias.alt + '-regular'],
	bold: $font.weight[$font.alias.alt + '-bold']
}

// Generate font-size variables: $font-size-xxs...xxl
for $s in $font.size
	define('$font-size-' + $s, $font.size[$s])
// @stylint on


/*
 * Transition
 */

// @stylint off
$transition = {
	time: {
		default: .5s,
	},

	easing: {
		default: ease-out,
		inOutBack: cubic-bezier(0.68, -0.55, 0.265, 1.55)
	}
}
// @stylint on

$transition.time.fast = $transition.time.default / 2
$transition.time.slow = $transition.time.default * 2
$transition-default = $transition.time.default
$transition-slow = $transition.time.slow
$transition-fast = $transition.time.fast


/*
 * Equalizr
 *
 * See how to use Mantis Equalizr:
 * https://github.com/acauamontiel/mantis-equalizr
 */

$mantis.equalizr.reset = true
equalizr-init()


/*
 * Breakpoints
 *
 * See how to use Mantis Querist:
 * https://github.com/acauamontiel/mantis-querist
 */

$mantis.querist.breakpoints = {
	sm: 0,
	md: 720,
	lg: 1024
}
querist-init()


/*
 * Grid
 *
 * See how to use Mantis Grid System:
 * https://github.com/acauamontiel/mantis-grid
 */

// @stylint off
$mantis.grid.breakpoints = ()
for $bp in $mantis.querist.breakpoints
	push($mantis.grid.breakpoints, {
		prefix: $bp,
		media-query: from($bp)
	})
// @stylint on
grid-init()


/*
 * Layers
 *
 * See how to use Mantis Layers:
 * https://github.com/acauamontiel/mantis-layers
 */

$mantis.layers.context = {
	default: (main tabs sidebar navbar overlay modal),
	tabs: (shadow active)
}
